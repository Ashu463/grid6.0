name: Check Inactive Issues

on:
  merge_group:
    types: [checks_requested]
  push:
    branches:
      - master
  pull_request:
    branches:
      - develop
      - release-*

jobs:
  check-inactive-issues:
    name: Check Inactive Issues
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
        
    - name: Initialize Containers
      run: |
        make build
        make stop

    - name: Debug Python
      run: |
        which python
        python -m pip list

    - name: Check inactive issues
      env:
        GITHUB_TOKEN: ${{ secrets.ASHU_GITHUB_TOKEN }}
      run: |
        import os
        import datetime
        from github import Github
        INACTIVE_DAYS = 7
        def check_inactive_issues(github_token, repo_owner, repo_name):
            """
            Check for inactive issues in the given repository and unassign them if necessary.
            """
            g = Github(github_token)
            repo = g.get_repo(f"{repo_owner}/{repo_name}")
            for issue in repo.get_issues(state="open", assignee="*"):
                if not issue.assignee:
                    continue
                timeline = list(issue.get_events())
                
                last_activity_date = max(event.created_at for event in timeline)
                
                now = datetime.datetime.now(datetime.timezone.utc)
                days_since_activity = (now - last_activity_date).total_seconds() / 86400 
                if days_since_activity > INACTIVE_DAYS:
                    issue.remove_assignees([issue.assignee])
                    issue.create_comment(
                        f"@{issue.assignee.login} has been unassigned from this issue due to inactivity for more than {INACTIVE_DAYS} days. If you'd like to continue working on this issue, please request to be reassigned."
                    )
                    print(f"Unassigned issue #{issue.number} from {issue.assignee.login} due to inactivity")
        if __name__ == "__main__":
            print("python script is running ashu")
            github_token = os.environ["GITHUB_TOKEN"]
            repo_owner = "oppia"
            repo_name = "oppia"
            check_inactive_issues(github_token, repo_owner, repo_name)

      
    - name: Report failure if failed on oppia/oppia develop branch
      if: ${{ failure() && github.event_name == 'push' && github.repository == 'oppia/oppia' && github.ref == 'refs/heads/develop' }}
      uses: ./.github/actions/send-webhook-notification
      with:
        message: "Inactive issue check failed on the upstream develop branch."
        webhook-url: ${{ secrets.BUILD_FAILURE_ROOM_WEBHOOK_URL }}
